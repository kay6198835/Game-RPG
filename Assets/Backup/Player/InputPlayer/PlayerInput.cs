//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Backup/Player/InputPlayer/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""26e30a52-ef73-4d95-b373-8b3715622f84"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ad8f70fa-d01b-40ab-91fb-8d10420e5d4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""e5075f18-09fc-47ca-b680-2c872021b423"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""0d5cbaea-9af2-433b-ba6d-ac62896c7b7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""d9107f69-f35f-49e8-869e-cd2af76cdf4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""1f0f0265-1d03-4768-9170-81c9e8653458"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip/Unequip"",
                    ""type"": ""Button"",
                    ""id"": ""949822f0-c4cb-4a19-b25d-e001bd023ba9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""fcf460e8-3dbd-4395-9168-59ea75aa8e2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interactor"",
                    ""type"": ""Button"",
                    ""id"": ""489162ee-bdef-47c4-817b-8789ff348737"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""12aa63d1-c26d-4023-90d2-dd050b6dc801"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8346b56b-3cd3-4f3a-b7b8-515b4f0c896a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""722e57a8-6238-4704-865c-b3810931d292"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""48c41861-9dc0-4ca6-9875-352fdd3e6d4f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb8792f2-cfe9-469c-a113-9f0b472e5018"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b10e2c85-2dd3-422e-a0fc-89733bc7205c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbbf1022-a888-4bf7-bd99-026cabfd0549"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1def900-e854-4b1e-ba69-11c81ae7e12e"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65c4657d-0108-4172-8d51-42e9698a550a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9575b604-6b19-4555-a72a-0294a5a097b2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Equip/Unequip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b84ea50c-0b20-46d3-82a6-b5956d44254c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe97ddde-f5ab-49a0-9757-a5397a07a9bc"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_Movement = m_Control.FindAction("Movement", throwIfNotFound: true);
        m_Control_MousePosition = m_Control.FindAction("MousePosition", throwIfNotFound: true);
        m_Control_Attack = m_Control.FindAction("Attack", throwIfNotFound: true);
        m_Control_SkillWeapon = m_Control.FindAction("SkillWeapon", throwIfNotFound: true);
        m_Control_AbilityWeapon = m_Control.FindAction("AbilityWeapon", throwIfNotFound: true);
        m_Control_EquipUnequip = m_Control.FindAction("Equip/Unequip", throwIfNotFound: true);
        m_Control_Dash = m_Control.FindAction("Dash", throwIfNotFound: true);
        m_Control_Interactor = m_Control.FindAction("Interactor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_Control_Movement;
    private readonly InputAction m_Control_MousePosition;
    private readonly InputAction m_Control_Attack;
    private readonly InputAction m_Control_SkillWeapon;
    private readonly InputAction m_Control_AbilityWeapon;
    private readonly InputAction m_Control_EquipUnequip;
    private readonly InputAction m_Control_Dash;
    private readonly InputAction m_Control_Interactor;
    public struct ControlActions
    {
        private @PlayerInput m_Wrapper;
        public ControlActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Control_Movement;
        public InputAction @MousePosition => m_Wrapper.m_Control_MousePosition;
        public InputAction @Attack => m_Wrapper.m_Control_Attack;
        public InputAction @SkillWeapon => m_Wrapper.m_Control_SkillWeapon;
        public InputAction @AbilityWeapon => m_Wrapper.m_Control_AbilityWeapon;
        public InputAction @EquipUnequip => m_Wrapper.m_Control_EquipUnequip;
        public InputAction @Dash => m_Wrapper.m_Control_Dash;
        public InputAction @Interactor => m_Wrapper.m_Control_Interactor;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SkillWeapon.started += instance.OnSkillWeapon;
            @SkillWeapon.performed += instance.OnSkillWeapon;
            @SkillWeapon.canceled += instance.OnSkillWeapon;
            @AbilityWeapon.started += instance.OnAbilityWeapon;
            @AbilityWeapon.performed += instance.OnAbilityWeapon;
            @AbilityWeapon.canceled += instance.OnAbilityWeapon;
            @EquipUnequip.started += instance.OnEquipUnequip;
            @EquipUnequip.performed += instance.OnEquipUnequip;
            @EquipUnequip.canceled += instance.OnEquipUnequip;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Interactor.started += instance.OnInteractor;
            @Interactor.performed += instance.OnInteractor;
            @Interactor.canceled += instance.OnInteractor;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SkillWeapon.started -= instance.OnSkillWeapon;
            @SkillWeapon.performed -= instance.OnSkillWeapon;
            @SkillWeapon.canceled -= instance.OnSkillWeapon;
            @AbilityWeapon.started -= instance.OnAbilityWeapon;
            @AbilityWeapon.performed -= instance.OnAbilityWeapon;
            @AbilityWeapon.canceled -= instance.OnAbilityWeapon;
            @EquipUnequip.started -= instance.OnEquipUnequip;
            @EquipUnequip.performed -= instance.OnEquipUnequip;
            @EquipUnequip.canceled -= instance.OnEquipUnequip;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Interactor.started -= instance.OnInteractor;
            @Interactor.performed -= instance.OnInteractor;
            @Interactor.canceled -= instance.OnInteractor;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSkillWeapon(InputAction.CallbackContext context);
        void OnAbilityWeapon(InputAction.CallbackContext context);
        void OnEquipUnequip(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnInteractor(InputAction.CallbackContext context);
    }
}
